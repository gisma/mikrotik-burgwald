---
title: "Daten"
format: html
engine: knitr
execute:
  echo: false
  eval: true
---

```{r}

<<<<<<< HEAD

=======
>>>>>>> b1abfff2990e1716f8325aabf6fcb667804419da
BASE_URL <- " https://gisma.github.io/mikrotik-burgwald/data"


root <- file.path(here::here(), "data")

naturalsize <- function(bytes) {
  units <- c("B","KiB","MiB","GiB","TiB")
  i <- 1; sz <- as.numeric(bytes)
  while (sz >= 1024 && i < length(units)) { sz <- sz/1024; i <- i+1 }
  sprintf("%.1f %s", sz, units[i])
}

files <- list.files(root, all.files = FALSE, full.names = TRUE, no.. = TRUE)
files <- files[basename(files) != "index.qmd" & file.exists(files) & !dir.exists(files)]

if (length(files) == 0) {
  cat("(Keine Dateien gefunden)")
} else {
  info <- file.info(files)
  # Namen und absoluter URL (URL-encodiert)
  names <- basename(files)
  urls  <- paste0(BASE_URL, "/", utils::URLencode(names, reserved = TRUE))

  df <- data.frame(
    Datei = sprintf("[%s](%s)", names, urls),
    Größe = vapply(info$size, naturalsize, character(1)),
    `Geändert (UTC)` = format(as.POSIXct(info$mtime, tz = "UTC"), "%Y-%m-%d %H:%M:%SZ"),
    check.names = FALSE
  )
  knitr::kable(df, format = "html", table.attr = 'class="table table-sm"')
}
<<<<<<< HEAD

describe_file <- function(name) {
  n <- tolower(name)
  ext <- sub("^.*\\.", "", n)
  if (grepl("^dds75-lb-.*\\.parquet$", n))
    return("Parquet-Timeseries DDS75-LB: received_at, device_id, distance_cm, temperature, battery, Flags.")
  if (grepl("^burgwald-ps-lb-.*\\.parquet$", n))
    return("Parquet-Timeseries PS-LB: received_at, water_cm/pressure_kpa/_mpa, idc_input_ma, vdc_input_v, battery.")
  if (grepl("^burgwald-sensecap-.*\\.parquet$", n))
    return("Parquet-Timeseries SenseCAP: received_at, temperature, humidity, pressure_hpa, illumination, ggf. UV/Wind/Regen.")
  if (ext == "parquet")
    return("Parquet: received_at, device_id, f_port, rssi, snr sowie sensortypische Messspalten.")
  if (ext == "ndjson")
    return("NDJSON: eine JSON-Zeile pro TTN-Uplink inkl. decoded_payload, rssi/snr, f_port.")
  if (ext == "csv")
    return("CSV: Tabellendaten mit received_at (UTC) und normalisierten Messfeldern; Kopfzeile vorhanden.")
  return("Datenablage des Messnetzes (Format je nach Gerät/Export).")
}

# … beim Erstellen der Tabelle:
df <- data.frame(
  Datei = sprintf("[%s](%s)", names, urls),
  Größe = vapply(info$size, naturalsize, character(1)),
  `Geändert (UTC)` = format(as.POSIXct(info$mtime, tz = "UTC"), "%Y-%m-%d %H:%M:%SZ"),
  Beschreibung = vapply(names, describe_file, character(1)),
  check.names = FALSE
)
=======
>>>>>>> b1abfff2990e1716f8325aabf6fcb667804419da
