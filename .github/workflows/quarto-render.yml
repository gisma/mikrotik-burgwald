name: Build & Publish Quarto (R/knitr)

on:
  push:
    branches: ['main']
    paths:
      - '**.qmd'
      - '_quarto.yml'
      - 'data/**'              # Datenänderungen sollen rendern
      - '!.github/**'
      - '!docs/**'             # docs-Änderungen NICHT triggern (vermeidet Loops)
  workflow_dispatch:

  # Automatisch nach erfolgreichem TTN-Workflow neu rendern
  workflow_run:
    workflows: ["TTN all devices → Pages"]   # <- GENAUEN Namen eintragen
    types: [completed]

permissions:
  contents: write

jobs:
  build:
    # Nur laufen, wenn entweder ein normaler Push ist oder der TTN-Workflow SUCCESS hatte
    if: |
      github.event_name != 'workflow_run' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: Install R packages (knitr, rmarkdown, here)
        run: |
          Rscript -e 'install.packages(c("knitr","rmarkdown","here"), repos="https://cloud.r-project.org")'

      - name: Sanity check: Quarto + R
        run: |
          quarto check r
          Rscript -e 'sessionInfo()'

      - name: Render Quarto (to docs/)
        env:
          # Beispiel: BASE_URL aus Env setzen, falls du das im QMD nutzt
          BASE_URL: "https://gisma.github.io/mikrotik-burgwald/data"
        run: |
          quarto render

      - name: Commit rendered site (docs/)
        run: |
          git config user.name  "quarto-bot"
          git config user.email "quarto-bot@example.com"
          git add docs
          git commit -m "Publish rendered site" || echo "no changes"
          git push

    # Kollisionen vermeiden, falls Runs dicht hintereinander starten
    concurrency:
      group: quarto-render
      cancel-in-progress: true
