name: Quarto Render

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: pages-build
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      TTN_APP_ID:      ${{ secrets.TTN_APP_ID }}
      TTN_REGION:      ${{ secrets.TTN_REGION }}
      TTN_API_KEY:     ${{ secrets.TTN_API_KEY }}
      DEVICES:         ${{ secrets.TTN_DEVICES }}
      TTN_AFTER_DAYS:  "2"

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      # --- Python vorbereiten & Daten holen ---
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas plotly pyarrow

      - name: Build data page (Python)
        run: |
          set -e
          mkdir -p data
          python scripts/pull_all_devices.py
          if [ ! -f data/data.html ]; then
            echo '<!doctype html><meta charset="utf-8"><p>(Noch keine Daten verfügbar. Die TTN-Pipeline erzeugt diese Seite beim nächsten Lauf.)</p>' > data/data.html
          fi
          echo "----- data/ -----"
          ls -lAh data

      # --- Quarto (ohne R) ---
      - name: Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Render site (Quarto)
        run: |
          set -e
          quarto render --no-cache
          echo "----- docs/ (nach Render) -----"
          ls -lAh docs || true

      # wichtig: data/ erst NACH dem Render in docs/data spiegeln
      - name: Copy data/ into docs/data/
        run: |
          set -e
          mkdir -p docs/data
          rsync -av --delete data/ docs/data/
          echo "----- docs/data/ -----"
          ls -lAh docs/data

      # --- Commit & Push mit Rebase/Retries ---
      - name: Commit rendered site
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Nur veröffentlichte Artefakte adden
          git add docs/ data/ || true
          git commit -m "Quarto render $(date -u +%Y-%m-%dT%H:%M:%SZ)" || echo "no changes"

          # Bis zu 3 Push-Versuche mit Rebase
          for i in 1 2 3; do
            git fetch origin main
            if git rebase origin/main; then
              if git push; then
                echo "Push OK"
                exit 0
              fi
            fi
            echo "Rebase/Push-Versuch $i fehlgeschlagen – neuer Versuch ..."
            git rebase --abort || true
            sleep 2
          done

          echo "Letzter Versuch: force-with-lease (falls Branchschutz dies erlaubt)"
          git fetch origin main
          git rebase origin/main || true
          git push --force-with-lease || true
