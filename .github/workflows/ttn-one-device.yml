name: TTN all devices → Pages

on:
  schedule:
    - cron: "*/30 * * * *"     # alle 30 Minuten
  workflow_dispatch:

permissions:
  contents: write

# Keine parallelen Läufe, verhindert Push-Konflikte
concurrency:
  group: ttn-pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      TTN_APP_ID:  ${{ secrets.TTN_APP_ID }}
      TTN_REGION:  ${{ secrets.TTN_REGION }}
      TTN_API_KEY: ${{ secrets.TTN_API_KEY }}
      THEME_DEFAULT: "light"   # optional: light/dark Default im Dashboard

    steps:
      - name: Checkout (full history for rebase)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Früh rebasen, damit der Arbeitsbaum sauber ist
      - name: Sync branch (pre-build rebase)
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          git config user.name  "ttn-bot"
          git config user.email "ttn-bot@example.com"
          git checkout "$BRANCH"
          git pull --rebase origin "$BRANCH" || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas plotly pyarrow python-dotenv

      - name: Build dashboard (pull all devices)
        run: |
          # erzeugt assets/data.html, assets/debug.html, theme-ecowitt.css etc.
          python scripts/pull_all_devices.py
          # Assets in Pages-Verzeichnis spiegeln
          mkdir -p docs/assets
          cp -r assets/* docs/assets/ || true

      - name: Publish data to docs/data
        run: |
          mkdir -p docs/data
          cp -a data/*.parquet docs/data/ 2>/dev/null || true
          cp -a data/*.ndjson  docs/data/ 2>/dev/null || true

      - name: Build data index (JSON)
        run: |
          python - << 'PY'
          import json, pathlib
          d = pathlib.Path("docs/data")
          d.mkdir(parents=True, exist_ok=True)
          items = []
          for p in sorted(d.glob("*")):
              if p.suffix.lower() not in (".parquet", ".ndjson"):
                  continue
              st = p.stat()
              items.append({
                  "name": p.name,
                  "size": st.st_size,
                  "mtime": int(st.st_mtime),
                  "type": "Parquet" if p.suffix.lower()==".parquet" else "NDJSON"
              })
          (d / "index.json").write_text(json.dumps(items, ensure_ascii=False), encoding="utf-8")
          PY

      # Sicher committen: stash → rebase → pop → commit → push
      - name: Commit docs/ and data/ (stash + rebase + push)
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          set -e
          git config user.name  "ttn-bot"
          git config user.email "ttn-bot@example.com"
          git checkout "$BRANCH"

          # Alle erzeugten Änderungen (inkl. untracked) zwischenspeichern
          git add -A
          git stash push --include-untracked --message "ci-wip" || true

          # Remote-Stand holen (fast-forward/rebase, keine Merge-Commits)
          git pull --rebase origin "$BRANCH" || true

          # Änderungen zurückholen
          git stash pop || true

          # Final committen & pushen
          git add docs/ data/ || true
          git commit -m "update all-devices $(date -u +%FT%TZ)" || echo "no changes"
          git push origin "$BRANCH"
