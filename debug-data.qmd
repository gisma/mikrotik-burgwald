---
title: "Status Informationen"
format: html
---

## Allgemeine Formate im Repo

**NDJSON** und **Parquet** sind beides Datenformate, die sich gut ergänzen:

-   **NDJSON** (Newline Delimited JSON) speichert Ereignisse zeilenweise als JSON-Objekte.\
    → Ideal für **Streaming und APIs**, weil jede Zeile ein eigenständiger Datensatz ist.\
    → Lässt sich mit Tools wie `jq`, `pandas.read_json(lines=True)` oder `jsonlite::stream_in()` direkt auswerten.

-   **Parquet** ist ein **spaltenorientiertes, binäres Format** für große Datenmengen.\
    → Optimiert für **Analysen und Abfragen**, sehr platzsparend und schnell.\
    → Standard in Big-Data-Ecosystemen (Spark, Hadoop, DuckDB, BigQuery, GDAL/GeoParquet).

**Typischer Workflow:** Rohdaten zunächst als **NDJSON** persistieren → für Analyse/Archiv in **Parquet** konvertieren.

## Sensoren

-   **DDS75-LB** (`dds75-lb-*.parquet`): `distance_cm` (bzw. `Distance_mm`), `temperature`, `battery`, Flags (`interrupt_flag`, `sensor_flag`).
-   **PS-LB** (`burgwald-ps-lb-*.parquet`): `water_cm` bzw. `pressure_kpa/_mpa`, zusätzlich `idc_input_ma`, `vdc_input_v`, `battery`, digitale Eingänge.
-   **SenseCAP** (`burgwald-sensecap-*.parquet`): `temperature`, `humidity`, `pressure_hpa`, `illumination`, ggf. `uv_index`, `wind_speed`, `wind_dir`, `rainfall`.

------------------------------------------------------------------------

::: iframe-wrap
<iframe id="data-iframe"
          src="assets/debug.html?v=2"
          loading="lazy"
          width="100%"
          height="900"
          style="border:0;"
          referrerpolicy="no-referrer"> </iframe>
:::

```{=html}
<script>
(function () {
  function postHeight() {
    var h = Math.max(
      document.body.scrollHeight || 0,
      document.documentElement.scrollHeight || 0
    );
    // kleine Obergrenze verhindern Layout-Jitter durch Plotly-Tooltips:
    if (h < 400) h = 400;
    parent.postMessage({ ttnHeight: h }, "*");
  }

  // beim Laden:
  window.addEventListener("load", postHeight);

  // bei jeder DOM/Größenänderung:
  new ResizeObserver(function(){ postHeight(); }).observe(document.body);

  // fallback: nachgeladene Fonts/images
  setTimeout(postHeight, 300);
  setTimeout(postHeight, 1200);
})();
</script>
```

```{=html}
<style>
.iframe-wrap { width: 100%; }
.iframe-wrap iframe { width: 100%; display: block; }
</style>
```
